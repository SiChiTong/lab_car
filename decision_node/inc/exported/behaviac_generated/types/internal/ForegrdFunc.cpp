// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

#include "ForegrdFunc.h"
#define _cancel  2

ForegrdFunc::ForegrdFunc():
fore_func_state (IDLE)
{
    build_up_action  = new actionlib::SimpleActionClient<robot_msgs::BuildUpAction>(nh,"build_up_action",true);
    gps_march_action  = new actionlib::SimpleActionClient<robot_msgs::MarchAction>(nh,"march_action_gps",true);
    laser_march_action  = new actionlib::SimpleActionClient<robot_msgs::MarchAction>(nh,"march_action_laser",true);
}

ForegrdFunc::~ForegrdFunc()
{
    delete build_up_action;
    delete gps_march_action;
    delete laser_march_action;
}


/**
 * assemble action
 */
void ForegrdFunc::Assemble()
{
    logger.DEBUGINFO(g_BlackBoardAgent->car_id,"Assemble");
    build_up_action->waitForServer();
    assemble_goal.goal =g_BlackBoardAgent->GetGoal();
    assemble_goal.idList.clear();
    for(int i = 0 ; i < g_GroupLogicAgent->GroupMember.size(); i++){
        assemble_goal.idList.push_back(g_GroupLogicAgent->GroupMember[i]);
    }
    if(g_BlackBoardAgent->car_id == 1){
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal x is : %f",assemble_goal.goal.position.x);
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal y is : %f",assemble_goal.goal.position.y);
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal z is : %f",assemble_goal.goal.position.z);
    }
    build_up_action->sendGoal(   assemble_goal,
                                boost::bind(&ForegrdFunc::Assemble_DoneCallback,this,_1,_2),
                                boost::bind(&ForegrdFunc::Assemble_ActiveCallback,this),
                                boost::bind(&ForegrdFunc::Assemble_FeedbackCallback,this,_1));
}
void ForegrdFunc::Assemble_FeedbackCallback(const robot_msgs::BuildUpFeedbackConstPtr &feedback){
    if(feedback->error_occured){
        fore_func_state= ForeFuncState::Failure;
    }
    else{
        fore_func_state = ForeFuncState::Running;
    }
        g_BlackBoardAgent->PubDecisionState(fore_func_state);
    return ;
}

void ForegrdFunc::Assemble_ActiveCallback(void){
    fore_func_state = ForeFuncState::Running;
    g_BlackBoardAgent->PubDecisionState(fore_func_state);
    return ;
}

void ForegrdFunc::Assemble_DoneCallback(const actionlib::SimpleClientGoalState &state, const robot_msgs::BuildUpResultConstPtr &result){
    if(result->succeed!=_cancel)
    {
        fore_func_state = ForeFuncState::IDLE;
        g_BasicLogicAgent->CurrentTask=TaskIndividual::NonTask;
    }
    else
        fore_func_state = ForeFuncState::IDLE;
    
    g_BlackBoardAgent->PubDecisionState(fore_func_state);
    return ;
}


/**
 * march actiob based on gps location 
 */ 
void ForegrdFunc::March_gps()
{
    logger.DEBUGINFO(g_BlackBoardAgent->car_id,"March_gps");
    gps_march_action->waitForServer();
    march_goal.goal =g_BlackBoardAgent->GetGoal();
    march_goal.idList.clear();
    for(int i = 0 ; i < g_GroupLogicAgent->GroupMember.size(); i++){
        march_goal.idList.push_back(g_GroupLogicAgent->GroupMember[i]);
    }
    if(g_BlackBoardAgent->car_id == 1){
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal x is : %f",march_goal.goal.position.x);
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal y is : %f",march_goal.goal.position.y);
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal z is : %f",march_goal.goal.position.z);
    }
    gps_march_action->sendGoal(   march_goal,
                                boost::bind(&ForegrdFunc::March_DoneCallback,this,_1,_2),
                                boost::bind(&ForegrdFunc::March_ActiveCallback,this),
                                boost::bind(&ForegrdFunc::March_FeedbackCallback,this,_1));
}


/**
 * march action based on laser localization
 */ 
void ForegrdFunc::March_laser()
{
    logger.DEBUGINFO(g_BlackBoardAgent->car_id,"March_laser");
    laser_march_action->waitForServer();
    march_goal.goal =g_BlackBoardAgent->GetGoal();
    march_goal.idList.clear();
    for(int i = 0 ; i < g_GroupLogicAgent->GroupMember.size(); i++){
        march_goal.idList.push_back(g_GroupLogicAgent->GroupMember[i]);
    }
    if(g_BlackBoardAgent->car_id == 1){
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal x is : %f",march_goal.goal.position.x);
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal y is : %f",march_goal.goal.position.y);
        logger.DEBUGINFO(g_BlackBoardAgent->car_id,"goal z is : %f",march_goal.goal.position.z);
    }
    laser_march_action->sendGoal(   march_goal,
                                boost::bind(&ForegrdFunc::March_DoneCallback,this,_1,_2),
                                boost::bind(&ForegrdFunc::March_ActiveCallback,this),
                                boost::bind(&ForegrdFunc::March_FeedbackCallback,this,_1));
}


void ForegrdFunc::March_FeedbackCallback(const robot_msgs::MarchFeedbackConstPtr &feedback){
    if(feedback->error_occured){
        fore_func_state= ForeFuncState::Failure;
    }
    else{
        fore_func_state = ForeFuncState::Running;
    }
    g_BlackBoardAgent->PubDecisionState(fore_func_state);
    return ;
}

void ForegrdFunc::March_ActiveCallback(void){
    fore_func_state = ForeFuncState::Running;
    g_BlackBoardAgent->PubDecisionState(fore_func_state);
    return ;
}

void ForegrdFunc::March_DoneCallback(const actionlib::SimpleClientGoalState &state, const robot_msgs::MarchResultConstPtr &result){
    if(result->succeed!=_cancel)
    {
        fore_func_state = ForeFuncState::IDLE;
        g_BasicLogicAgent->CurrentTask=TaskIndividual::NonTask;
    }
    else
        fore_func_state = ForeFuncState::IDLE;
    
    g_BlackBoardAgent->PubDecisionState(fore_func_state);
    return ;
}

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE
