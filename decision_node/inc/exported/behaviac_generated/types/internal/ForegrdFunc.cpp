// -------------------------------------------------------------------------------
// THIS FILE IS ORIGINALLY GENERATED BY THE DESIGNER.
// YOU ARE ONLY ALLOWED TO MODIFY CODE BETWEEN '///<<< BEGIN' AND '///<<< END'.
// PLEASE MODIFY AND REGENERETE IT IN THE DESIGNER FOR CLASS/MEMBERS/METHODS, ETC.
// -------------------------------------------------------------------------------

#include "ForegrdFunc.h"
#define _cancel  2
///<<< BEGIN WRITING YOUR CODE FILE_INIT

///<<< END WRITING YOUR CODE

ForegrdFunc::ForegrdFunc():
fore_func_state (IDLE)
{
    build_up_action  = new actionlib::SimpleActionClient<robot_msgs::BuildUpAction>(nh,"build_up_action",true);
} 

ForegrdFunc::~ForegrdFunc()
{
///<<< BEGIN WRITING YOUR CODE DESTRUCTOR
    delete build_up_action;
///<<< END WRITING YOUR CODE
}

void ForegrdFunc::Assemble()
{
        ROS_INFO("Assemble");
///<<< BEGIN WRITING YOUR CODE Assemble
//   if(g_BasicLogicAgent->CurrentTask!=TaskIndividual::NonTask){
//         g_BackgrdFuncAgent->STOP();
//     }
//     //regist OR cover CurrentMission
//     g_BasicLogicAgent->CurrentTask=g_BasicLogicAgent->InputTask;
    //clear used command
    //g_BasicLogicAgent->InputTask=TaskIndividual::NonTask;

    build_up_action->waitForServer();
    goal.goal =g_BlackBoardAgent->GetGoal();
        ROS_INFO("goal x is : %f",goal.goal.position.x);
        ROS_INFO("goal y is : %f",goal.goal.position.y);
        ROS_INFO("goal z is : %f",goal.goal.position.z);
        build_up_action->sendGoal(   goal,
                                    boost::bind(&ForegrdFunc::DoneCallback,this,_1,_2),
                                    boost::bind(&ForegrdFunc::ActiveCallback,this),
                                    boost::bind(&ForegrdFunc::FeedbackCallback,this,_1));
}
 void ForegrdFunc::FeedbackCallback(const robot_msgs::BuildUpFeedbackConstPtr &feedback){
        if(feedback->error_occured){
            fore_func_state= ForeFuncState::Failure;
        }
        else{
            fore_func_state = ForeFuncState::Running;
        }
        return ;
    }

    void ForegrdFunc::ActiveCallback(void){
        fore_func_state = ForeFuncState::Running;
        return ;
    }

    void ForegrdFunc::DoneCallback(const actionlib::SimpleClientGoalState &state, const robot_msgs::BuildUpResultConstPtr &result){
        if(result->succeed==true){
			ROS_INFO("DoneCallback_succeed");
            g_BasicLogicAgent->CurrentTask=TaskIndividual::NonTask;
            this->fore_func_state = ForeFuncState::Success;
            g_BlackBoardAgent->PubDecisionState("build up task done");
        }
        else if(result->succeed==false){
			ROS_INFO("DoneCallback_fail");
            this->fore_func_state = ForeFuncState::Failure;
            g_BasicLogicAgent->CurrentTask=TaskIndividual::NonTask;
            std::vector<robot_msgs::HostCmd>().swap(g_BlackBoardAgent->msgs);//if fail on one Task,clear the TaskList,and return failure.
        }else if(result->succeed==  _cancel){
			ROS_INFO("Mission_Cancel");//STOP不在callback中清CurrentT,Pause不需要清CurrentT,所以callback不处理cancel
		}
        return ;
    }

///<<< BEGIN WRITING YOUR CODE FILE_UNINIT

///<<< END WRITING YOUR CODE
